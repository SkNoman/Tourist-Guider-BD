plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'com.example.crud'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.crud"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionCode 1
        versionName "1.0"
        buildConfigField "String","BASE_URL","\""+getBaseUrl()+"\""
        buildConfigField "String","SECRET_KEY",getSecretKey()
        buildConfigField "String","API_KEY",getAPIKey()


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.room:room-common:2.5.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //MATERIAL DESIGN
    implementation "com.google.android.material:material:1.8.0"

    //GLIDE IMAGE LIBRARY
    implementation 'com.github.bumptech.glide:glide:4.14.2'

    //NAVIGATION COMPONENT
    def nav_version = "2.5.3"

    // Kotlin
    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")

    // Feature module Support
    implementation("androidx.navigation:navigation-dynamic-features-fragment:$nav_version")

    // Testing Navigation
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")

    // Jetpack Compose Integration
    implementation("androidx.navigation:navigation-compose:$nav_version")

    //HILT
    implementation 'com.google.dagger:hilt-android:2.44'
    kapt 'com.google.dagger:hilt-android-compiler:2.44'

    //RETROFIT
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    //LOG INTERCEPTOR
    implementation("com.squareup.okhttp3:logging-interceptor:4.10.0")

    //GSON
    implementation 'com.google.code.gson:gson:2.9.1'

    //DRAWER LAYOUT
    implementation("androidx.drawerlayout:drawerlayout:1.1.1")

    //GLIDE
    implementation 'com.github.bumptech.glide:glide:4.15.1'

    // Room components
    implementation "androidx.room:room-runtime:2.4.3"
    kapt "androidx.room:room-compiler:2.4.3"
    implementation "androidx.room:room-ktx:2.4.3"
    androidTestImplementation "androidx.room:room-testing:2.4.3"

    //View Pager
    implementation("androidx.viewpager2:viewpager2:1.0.0")
    //Rounded Image
    implementation 'com.makeramen:roundedimageview:2.3.0'
    //WEB View
    implementation 'androidx.webkit:webkit:1.6.1'
    //Swipe Refresh Layout
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
    //Language support
    implementation 'com.akexorcist:localization:1.2.11'



}

//get base url from local properties file
def getBaseUrl(){
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String baseUrl = properties.getProperty("base_url")
    if (baseUrl == null)
    {
        throw new FileNotFoundException("You need to provide base url in your local.properties file")
    }
    return  baseUrl
}

//get secret key from local properties file
def getSecretKey(){
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String secretKey = properties.getProperty("secret_key")
    if (secretKey == null)
    {
        throw new FileNotFoundException("You need to provide secret key in your local.properties file")
    }
    return  secretKey
}

//get api key form local properties file
def getAPIKey(){
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String apiKey = properties.getProperty("api_key")
    if (apiKey == null)
    {
        throw  new FileNotFoundException(("You need to provide api key in your local properties file"))
    }
    return  apiKey
}
